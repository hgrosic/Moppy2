package com.moppy.control.gui.mapperpanel;

import com.moppy.control.MoppyPreferences;
import com.moppy.control.config.MoppyConfig.MIDIScriptMapperConfig;
import com.moppy.core.events.mapper.MIDIScriptMapper;
import com.moppy.core.events.mapper.MapperCollection;
import com.moppy.core.status.StatusConsumer;
import com.moppy.core.status.StatusUpdate;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import javax.sound.midi.MidiMessage;

/**
 *
 */
public class MapperCollectionPanel extends javax.swing.JPanel implements StatusConsumer {

    private MapperCollection<MidiMessage> mappers;

    /**
     * Creates new form MappersDisplayPanel
     */
    public MapperCollectionPanel() {
        initComponents();
    }

    public void initMapperCollectionPanel(MapperCollection<MidiMessage> mappers) {
        this.mappers = mappers;
        loadMappersFromConfig(MoppyPreferences.getConfiguration().getMapperConfigs());
    }

    /*
    * Loads mappers as defined in config file, overwriting any existing mappers.
    */
    public void loadMappersFromConfig(List<MIDIScriptMapperConfig> configList) {
        mappers.clearMappers();

        configList.stream().forEach(config -> {
            addNewMapper(config);
        });
    }

    public void saveMappersToConfig() {
        List<MIDIScriptMapperConfig> configList = Stream.of(this.getComponents())
                .filter(c -> c instanceof MapperPanel)
                .map(mp -> {
                    MapperPanel panel = (MapperPanel)mp;
                    return ((MapperPanel)mp).getMapperConfig();})
                .collect(Collectors.toList());

        MoppyPreferences.getConfiguration().setMapperConfigs(configList);
        MoppyPreferences.saveConfiguration();
    }

    private void addNewMapper(MIDIScriptMapperConfig mapperConfig) {
        MIDIScriptMapper newMapper = new MIDIScriptMapper();
        mappers.addMapper(newMapper);
        this.add(new MapperPanel(newMapper, mapperConfig, this));
        this.revalidate();
        this.repaint();
    }

    private void addNewMapper() {
        addNewMapper(new MIDIScriptMapperConfig());
    }

    protected void removeMapper(MapperPanel panelBeingRemoved) {
        mappers.removeMapper(panelBeingRemoved.getMapper());
        this.remove(panelBeingRemoved);
        this.repaint();
    }

    private void enableMapperEditing(boolean enable) {
        addMapperButton.setEnabled(enable);
        Arrays.stream(this.getComponents()).filter(c -> c instanceof MapperPanel)
                .forEach(c -> ((MapperPanel)c).enableEditing(enable));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMapperButton = new javax.swing.JButton();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        addMapperButton.setText("Add Mapper");
        addMapperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMapperButtonActionPerformed(evt);
            }
        });
        add(addMapperButton);
    }// </editor-fold>//GEN-END:initComponents

    private void addMapperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMapperButtonActionPerformed
        addNewMapper();
    }//GEN-LAST:event_addMapperButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMapperButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void receiveUpdate(StatusUpdate update) {
        switch (update.getType()) {
            case SEQUENCE_START:
                enableMapperEditing(false);
                saveMappersToConfig(); // Go ahead and proactively save the mappers when we start playing
                break;
            case SEQUENCE_STOPPED:
            case SEQUENCE_END:
            case SEQUENCE_PAUSE:
                enableMapperEditing(true);
                break;
        }
    }
}
