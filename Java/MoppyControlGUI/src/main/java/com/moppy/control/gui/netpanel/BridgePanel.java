/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.moppy.control.gui.netpanel;

import com.moppy.control.NetworkManager;
import com.moppy.core.comms.bridge.NetworkBridge;
import java.io.IOException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Sam
 */
public class BridgePanel extends javax.swing.JPanel {

    // NetworkManager for sending connect/disconnect events to
    private final NetworkManager netManager;

    /**
     * Creates new form BridgePanel
     */
    public BridgePanel(NetworkManager netManager, String bridgeIdentifier, NetworkBridge netBridge) {
        this.netManager = netManager;
        initComponents();

        bridgeCheckBox.setText(bridgeIdentifier);
        bridgeCheckBox.setSelected(netBridge.isConnected());
        if (!netBridge.getConnectionOptions().isEmpty()) {
            connectionOptionCB.setEnabled(!netBridge.isConnected());
            connectionOptionCB.setModel(new DefaultComboBoxModel(netBridge.getConnectionOptions().toArray()));
            connectionOptionCB.setSelectedItem(netBridge.currentConnectionOption());
        } else {
            connectionOptionCB.setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bridgeCheckBox = new javax.swing.JCheckBox();
        connectionOptionCB = new javax.swing.JComboBox<>();

        bridgeCheckBox.setText("netBridge");
        bridgeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bridgeCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(bridgeCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectionOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(bridgeCheckBox)
                .addComponent(connectionOptionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bridgeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bridgeCheckBoxActionPerformed
        try {
            if (bridgeCheckBox.isSelected()) {
                netManager.connectBridge(bridgeCheckBox.getText(), connectionOptionCB.getSelectedItem());
            } else {
                netManager.closeBridge(bridgeCheckBox.getText());
            }
        } catch (IOException ex) {
                Logger.getLogger(BridgePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_bridgeCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox bridgeCheckBox;
    private javax.swing.JComboBox<String> connectionOptionCB;
    // End of variables declaration//GEN-END:variables
}
